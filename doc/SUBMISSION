Проверять при получении. Если спам - шлем через spamsender. Чистое шлем напрямую.
Схема с mailproc не подходит, т.к. клиент априори чист и его нужно заинтересовать в отправке через submission,
ответы 4xx вызовут дополнительные вопросы. Требуется экономить трафик клиента, исходящий тоже.
Без message-id отвергаем - 5xx.
Логи spamassassin через лог exim добавлять в базу message-id на каждое сообщение.
Если ответ на входящее сообщение - шлем в hamtrap и логируем message-id как чистый.
Если нет отправителя в сессии - не проверяем, шлем через spamsender, логируем message-id как спам - отсутствует отправитель в сессии.
submission со временем преобразуются в spamsender, т.к. его вероятно получатели будут добавлять в RBL.
spamsender добавляет флаг X-Spam-Flag, ничего не подписывает (т.к. не все получатели будут разбираться в заголовках а банят по идентификатору в подписи).
Адреса отправителей (из сессии и заголовка сообщения) нужно проверять и добавлять в БД. Придется заводить БД smtp
на submission - проверка адресов отправителей есть очень полезная фича (админу будет полезно узнать,
что адрес не принимает почту, либо не следует с него что-то слать). Дублировать БД не желательно. Других идей пока нет.
Несуществующие отправители (SMTP или MIME) отвергаем - 5xx.
Идентифицировать клиента по IP, TLS SNI либо по логину.

1. Идентифицировать клиента
1.1. Аутентификация (идентификатор клиента)
1.1.0. наш hostname
1.1.1. IP-адрес
1.1.2. TLS SNI
1.1.3. SMTP AUTH login
1.2. Авторизация (удостовериться в подлинности клиента)
1.2.1. наш hostname (наш realm)
1.2.2. валидация TLS сертификата
1.2.3. SMTP AUTH password
2. Проверить домен отправителя
2.1. Блокировать отправку, если домен не на этом клиенте
3. Проверить адрес отправителя (SMTP и MIME)
3.1. Запись отсутствует в БД - 4хх Verifying (mbxchk)
3.2. Absent - 5xx sender mbox not exists (сообщение аналогично smtp, период проверки укорочен)
3.3. Есть - 2xx
4. Проверить spamc
4.1. Проверить message-id и sender
4.1.1. Нет message-id - 5xx
4.1.2. Есть message-id и sender в БД - 2xx duplicate prev-queue-id, отбрасываем
4.1.3. Есть message-id в БД но другой sender - 5xx actual_sender prev-queue-id
4.2. Учитывать trusted size (>2M)
5. Роутинг
5.1. backup
5.2. hamtrap
5.3. spamsender
5.4. интернет

Для успешной идентификации клиента нужно проверить по всем заданным (клиентом) параметрам (IP, TLS SNI, SMTP AUTH).
Ищем hostname в ou=system.

IP-адрес, SMTP AUTH password и TLS ключи/сертификаты решено хранить в ou=user, что-бы не перегружить ou=system.
Хоть данные в ou=user могут быть недоступны (репликация не завершена) или не актуальны (если сервер вывели
из realm - клиент получит уведомление в MAIL), отсутствие информации об IP-адресе, логине или параметрах TLS
приведет ко временной ошибке соединения - клиент повторит попытку позже или сразу но на другой сервер.
При обработке MAIL в первую очередь проверить realm для домена отправителя.

Ищем IP-адрес в service=submission+realm=xxx,ou=user.
SMTP AUTH login и TLS SNI содержат clientName.
SMTP AUTH password и TLS ключи/сертификаты находятся в service=submission+realm=xxx,ou=user.

В SDB хранить sender и queue-id.
