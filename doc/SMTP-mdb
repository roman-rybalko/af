incoming: mid, sender
* Цель: быстро ответить отправителю и закрыть соединение за счет отложенной проверки сообщения.
  Теоретически это более эфективно и ресурсоэкономично, чем проверять во время приема сообщения.
  Эфектичнее противодействует DOS-атакам.
* Запись в БД создавать в realm для первого получателя (нет смысла для всех т.к. список получателей при повторной
  пересылке совпадает, запись в LDAP ресурсоемка), проверять для realm всех получателей.
- Была идея записывать в лог и заводить запись в БД (новый атрибут) сразу при первом получении с целью разгрузить mailproc.
  Если mailproc не успевает, возможно его переполнить одинаковыми сообщениями.
  Возникает гонка smtp и mailproc, возможна ситуация когда mailproc отработает раньше и будет перезаписан smtp,
  тогда сообщение вообще не дойдет до получателя.
- Была идея сохранять recipients и блокировать, если не совпадают. Но возможна ситуация,
  когда одно сообщение отправляется нескольким получателям в разных сессиях.
* При получении сообщения искать только mid (в исходящих тоже) и блокировать (wrong Sender for this Message-ID),
  если отправитель не совпадает. Совпадение маловероятно. Если отправлять в mailproc то возникнет несколько записей
  с одним mid и разными sender.
- Была идея при приеме проверенного сообщение записать в лог и в БД (новый атрибут, queue id) для блокирования дубликатов.
  Не доставится сообщение, которое было отправлено нескольким получателям в разных сессиях.
- Была идея проверять references по входящим сообщениям тоже, т.к. можно ответить на свое же сообщение. Однако этот ответ
  так-же будет содержать message-id исходящего сообщения. Если же нет message-id исходящего сообщения, тогда это спам.
  Искать ответы на проверенные чистые входящие сообщения пока считается лишнее усложнение.

outgoing: mid, sender
* Цель: снизить нагрузку на mailproc, снизить ложные срабатывания
* Запись в БД для realm отправителя, проверять для realm всех получателей.
* Проверять конкатенацию In-Reply-To и References.
