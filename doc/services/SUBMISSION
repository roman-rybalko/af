Концепция
=========
Сервис отправки сообщений, сервис рассылок.

Описание
========
Принимаем все без ограничений, за исключением несуществующих отправителей.

MX настраивается для каждого клиента, домена и отправителя. Возможно несколько MX.
Клиент самостоятельно MX не выставляет.
Для load balancing - сервис рассылок.

Пересылаем в mailproc, он выставляет вердикт.
Все, что не идет в mailproc - заносим в БД самостоятельно через exim-log.

Больше определенного размера в mailproc не пересылаем, вердикт логируем в exim-log, затем в БД.
Без message-id - добавляем message-id.
Если ответ на входящее сообщение - шлем в hamtrap и логируем message-id как чистый.

Регулярно собираем статистику по отправителям.
Нет отправителя в сессии - не шлем в mailproc, шлем через spamsender.

submission со временем преобразуются в spamsender, т.к. вероятно получатели его будут добавлять в RBL.
spamsender добавляет флаг X-Spam-Flag.

Адреса отправителей (из сессии и заголовка сообщения) нужно проверять и добавлять в БД. Придется заводить БД smtp
на submission - проверка адресов отправителей есть нужная фича (админу будет полезно узнать,
что адрес не принимает почту, либо не следует с него что-то слать).
Дублировать БД не желательно. Других идей пока нет.

Несуществующие отправители (SMTP или MIME) отвергаем - 5xx.

Идентифицировать клиента по IP, TLS SNI либо по логину.

Алгоритм
========
1. Идентифицировать клиента
1.1. Аутентификация (идентификатор клиента)
1.1.0. наш hostname
1.1.1. IP-адрес
1.1.2. TLS SNI
1.1.3. SMTP AUTH login
1.2. Авторизация (удостовериться в подлинности клиента)
1.2.1. наш hostname (наш realm)
1.2.2. валидация TLS сертификата
1.2.3. SMTP AUTH password
2. Проверить домен отправителя
2.1. Блокировать отправку, если домен не на этом клиенте
3. Проверить адрес отправителя (SMTP и MIME)
3.1. Запись отсутствует в БД - 4хх Verifying (mbxchk)
3.2. Absent - 5xx sender mbox not exists (сообщение аналогично smtp, период проверки укорочен)
3.3. Есть - 2xx
4. Проверить message-id и sender
4.1. Нет message-id - добавляем
4.2. Есть message-id и sender в БД - 2xx duplicate prev-queue-id, отбрасываем - ??? а если расылка?!
4.3. Есть message-id в БД но другой sender - 5xx actual_sender prev-queue-id
5. Учитывать trusted size (>2M)
6. Роутинг
6.1. mailproc
6.2. backup
6.3. hamtrap
6.4. spamsender
6.5. mx

Заметки
=======
Для успешной идентификации клиента нужно проверить по всем заданным (клиентом) параметрам (IP, TLS SNI, SMTP AUTH).
Ищем hostname в ou=system.

IP-адрес, SMTP AUTH password и TLS ключи/сертификаты решено хранить в ou=user, что-бы не перегружить ou=system.
Хоть данные в ou=user могут быть недоступны (репликация не завершена) или не актуальны (если сервер вывели
из realm - клиент получит уведомление в MAIL), отсутствие информации об IP-адресе, логине или параметрах TLS
приведет ко временной ошибке соединения - клиент повторит попытку позже или сразу но на другой сервер.
При обработке MAIL в первую очередь проверить realm для домена отправителя.

Ищем IP-адрес в service=submission+realm=xxx,ou=user.
SMTP AUTH login и TLS SNI содержат clientName.
SMTP AUTH password и TLS ключи/сертификаты находятся в service=submission+realm=xxx,ou=user.

В SDB хранить sender и queue-id.

Скрывать IP-адреса отправителей - клиентская настройка.
