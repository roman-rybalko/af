# Lightweight Directory Access Protocol Connection
LDAP_C = ldapi://%2fvar%2frun%2fopenldap%2fldapi

exim_user = mailnull
exim_group = mail
never_users = root
daemon_smtp_ports = 25 : 137 : 138 : 139 : 445
smtp_banner = smtp.services.advancedfiltering.net ESMTP
host_lookup = *
rfc1413_hosts = :
rfc1413_query_timeout = 0s
smtp_receive_timeout = 5s
local_scan_timeout = 5s
ignore_bounce_errors_after = 2d
timeout_frozen_after = 7d
tls_advertise_hosts = *
tls_certificate = /usr/local/etc/ssl/smtp.services.advancedfiltering.net.crt
tls_privatekey = /usr/local/etc/ssl/smtp.services.advancedfiltering.net.key
tls_try_verify_hosts = *
tls_verify_certificates = /usr/local/etc/ssl/ca
tls_crl = /usr/local/etc/ssl/ca
log_selector = +all -arguments
acl_smtp_connect = connect_acl
acl_smtp_helo = helo_acl
acl_smtp_mail = mail_acl
acl_smtp_rcpt = rcpt_acl
acl_smtp_data = data_acl

begin acl

# Domain Name System Block List
dnsbl_acl:
  deny
    condition = $acl_c_tp_f
    logwrite = DEBUG: dnsbl: trusted port
  accept
    dnslists = <, ${lookup ldap{LDAP_C/$acl_c_dbsbl_ldap_dn?afSSMTPDNSBLDomainName?base}}
    set acl_c_dnsbl_m = $sender_host_address is listed at $dnslist_domain ($dnslist_value: $dnslist_text)
    logwrite = DEBUG: dnsbl
  deny

# General Black/White List
gen_bwl_acl:
  warn
    set acl_c_bwl_d = ${lookup ldap{LDAP_C/$acl_c_bwl_ldap_q,$acl_c_bwl_ldap_dn?objectClass,afSMTPBWListIsBlack?base}}
  accept
    condition = ${extract {afSMTPBWListIsBlack}{$acl_c_bwl_d}{true}{false}}
    # Result
    set acl_c_bwl_r = black
    logwrite = DEBUG: bwl: black
  accept
    condition = ${if bool_lax{$acl_c_bwl_d}}
    set acl_c_bwl_r = white
    logwrite = DEBUG: bwl: white
  deny

# Sender Host Black/White List
sh_bwl_acl:
  accept
    set acl_c_bwl_ldap_q = afSMTPBWListHostAddress=${quote_ldap_dn:$sender_host_address}
    acl = gen_bwl_acl
    set acl_c_bwl_m = sender host address
    logwrite = DEBUG: sha_bwl
  deny
    ! condition = ${if bool_lax{$sender_host_name}}
    logwrite = DEBUG: shn_bwl: sender host name unknown
  accept
    set acl_c_bwl_ldap_q = afSMTPBWListHostName=${quote_ldap_dn:$sender_host_name}
    acl = gen_bwl_acl
    set acl_c_bwl_m = sender host name
    logwrite = DEBUG: shn_bwl
  deny

# Certificate Black/White List
cert_bwl_acl:
  deny
    ! verify = certificate
    logwrite = DEBUG: cert_bwl: cert verify fail
  accept
    set acl_c_bwl_ldap_q = afSMTPBWListCertificateSubject=${quote_ldap_dn:$tls_peerdn}
    acl = gen_bwl_acl
    set acl_c_bwl_m = certificate
    logwrite = DEBUG: cert_bwl
  deny

# Sender Address Black/White List LDAP Query
SA_BWL_LDAP_Q = afSMTPBWListSenderAddress=${quote_ldap_dn:$sender_address}
# ... Black List Message
SA_BL_M = sender address
sa_bwl_acl:
  deny
    condition = $acl_m_spf_f
    logwrite = DEBUG: sa_bwl: spf fail
  accept
    set acl_c_bwl_ldap_q = SA_BWL_LDAP_Q
    acl = gen_bwl_acl
    set acl_c_bwl_m = SA_BL_M
    logwrite = DEBUG: sa_bwl
  deny

# Black/White List Message
BWL_M = Access denied ($acl_c_bwl_category_m, $acl_c_bwl_m)
# Black/White List
# include by "require"
bwl_acl:
  accept
	set acl_c_bwl_r = ""
    ! acl = $acl_c_bwl_acl
    logwrite = DEBUG: bwl: $acl_c_bwl_acl: no match
  deny
    # user lists shouldn't reach spamtrap
    condition = $acl_m_bwl_user_f
    condition = ${if eq{$acl_c_bwl_r}{black}}
    message = BWL_M
    logwrite = DEBUG: bwl: deny (user)
  deny
    ! condition = $acl_m_bwl_user_f
    ! condition = $acl_c_st_f
    condition = ${if eq{$acl_c_bwl_r}{black}}
    message = BWL_M
    logwrite = DEBUG: bwl: deny
  accept
    ! condition = $acl_m_bwl_user_f
    condition = $acl_c_st_f
    condition = ${if eq{$acl_c_bwl_r}{black}}
    set acl_c_st_m = BWL_M
    logwrite = DEBUG: bwl: spamtrap
  accept
    condition = ${if eq{$acl_c_bwl_r}{white}}
    set acl_c_wl_f = true
    logwrite = DEBUG: bwl: accept
  accept
    logwrite = ERROR: UNKNOWN BWL RESULT: $acl_c_bwl_r

# System LDAP DN
S_LDAP_DN = ou=system,o=advancedfiltering
# System SMTP LDAP DN
S_SMTP_LDAP_DN = afSServiceName=smtp,S_LDAP_DN

# System Host Realm Data
S_HR_D = <, ${lookup ldap{LDAP_C/afSHostName=${quote_ldap_dn:$primary_hostname},S_LDAP_DN?afSHostRealm?base}}
# System SMTP Trusted Port Data
S_TP_D = <, ${lookup ldap{LDAP_C/S_SMTP_LDAP_DN?afSSMTPTrustedPort?base}}
# ... Trusted Port Flag
S_TP_F = ${if forany{S_TP_D}{={$item}{$received_port}}}
# ... Spam Trap Probability Numerator
S_STPN = ${lookup ldap{LDAP_C/S_SMTP_LDAP_DN?afSSMTPSpamTrapProbabilityNumerator?base}}
# ... Spam Trap Probability Denominator
S_STPD = ${lookup ldap{LDAP_C/S_SMTP_LDAP_DN?afSSMTPSpamTrapProbabilityDenominator?base}}
# ... Spam Trap Flag
S_ST_F = ${if >{S_STPN}{${eval:$tod_epoch_l%S_STPD}}}
connect_acl:
  warn
    set acl_c_tp_f = S_TP_F
    set acl_c_st_f = S_ST_F
    set acl_c_host_realms = S_HR_D
    set acl_c_bwl_ldap_dn = S_SMTP_LDAP_DN
    set acl_c_bwl_category_m = system policy
    logwrite = DEBUG: acl_c_tp_f=$acl_c_tp_f acl_c_st_f=$acl_c_st_f acl_c_host_realms=$acl_c_host_realms
  require
    set acl_c_bwl_acl = sh_bwl_acl
    acl = bwl_acl
  warn
  	! condition = $acl_c_wl_f
    set acl_c_dnsbl_ldap_dn = S_SMTP_LDAP_DN
    acl = dnsbl_acl
    set acl_c_dnsbl_f = true
  accept

helo_acl:
  accept
    condition = $acl_c_wl_f
    log_message = whitelist
  accept
    condition = ${if bool_lax{$acl_c_st_m}}
    log_message = spamtrap
  require
    set acl_c_bwl_acl = cert_bwl_acl
    acl = bwl_acl
  accept

mail_acl:
  accept
    condition = $acl_c_wl_f
    log_message = whitelist
  accept
    condition = ${if bool_lax{$acl_c_st_m}}
    log_message = spamtrap
  warn
    spf = fail
    set acl_m_spf_f = true
    set acl_m_spf_m = $sender_host_address is not allowed to send mail from $sender_address_domain
  require
    set acl_c_bwl_acl = sa_bwl_acl
    acl = bwl_acl
  accept

# User SMTP LDAP DN
U_SMTP_LDAP_DN = afUServiceName=smtp,ou=user,o=advancedfiltering
# User SMTP Realm DN
U_SMTP_R_LDAP_DN = afUServiceRealm=${quote_ldap_dn:$acl_m_msg_realm},U_SMTP_LDAP_DN
# User SMTP Realm Client DN
U_SMTP_R_C_LDAP_DN = afUClientName=${quote_ldap_dn:$acl_m_msg_client},U_SMTP_R_LDAP_DN
# User SMTP Realm Client Domain DN
U_SMTP_R_C_D_LDAP_DN = afUSMTPDomainName=${quote_ldap_dn:$acl_m_msg_domain},U_SMTP_R_C_LDAP_DN
# User SMTP Realm Client Domain Mail Box DN
U_SMTP_R_C_D_MB_LDAP_DN = afUSMTPDMBLocalPart=${quote_ldap_dn:$local_part},U_SMTP_R_C_D_LDAP_DN

# Lookup recipient domain
domain_rcpt_acl:
  accept
    set acl_m_msg_domain = ${lookup ldap{LDAP_C/afUSMTPDomainName=${quote_ldap_dn:$domain},U_SMTP_R_C_LDAP_DN?afUSMTPDomainName?base}}
    condition = ${if bool_lax{$acl_m_msg_domain}}
    logwrite = DEBUG: acl_m_msg_domain=$acl_m_msg_domain
  accept
    set acl_m_msg_domain = ${lookup ldap{LDAP_C/U_SMTP_R_C_LDAP_DN?afUSMTPDomainName?sub?(&(objectClass=afUSMTPDomain)(afUSMTPDomainAliasName=${quote_ldap:$domain}))}}
    condition = ${if bool_lax{$acl_m_msg_domain}}
    logwrite = DEBUG: acl_m_msg_domain=$acl_m_msg_domain (alias)
  defer
    message = Replicating, try again later

# User Mail Box Absent Message
U_MBA_M = Mail box does not exist

rcpt_acl:
  deny
    set acl_m_msg_client = ${lookup ldap{LDAP_C/afSSMTPDomainName=${quote_ldap_dn:$domain},S_SMTP_LDAP_DN?afSSMTPDomainClientName?base}}
    logwrite = DEBUG: acl_m_msg_client=$acl_m_msg_client
    ! condition = ${if bool_lax{$acl_m_msg_client}}
    message = The domain is not in service
  defer
    set acl_m_msg_realm = ${lookup ldap{LDAP_C/afSClientName=${quote_ldap_dn:$acl_m_msg_client},S_LDAP_DN?afSClientRealm?base}}
    logwrite = DEBUG: acl_m_msg_realm=$acl_m_msg_realm
    ! condition = ${if forany{$acl_c_host_realms}{eq{$item}{$acl_m_msg_realm}}}
    message = Moved, try another host
  require
    acl = domain_rcpt_acl
  defer
    set acl_m_mb_d = ${lookup ldap{LDAP_C/U_SMTP_R_C_D_MB_LDAP_DN?afUSMTPDMBTimeCreated,afUSMTPDMBIsAbsent?base}}
    ! condition = ${if bool_lax{$acl_m_mb_d}}
    message = Your data is verifying, try again later
    logwrite = AdvancedFilteringNewMailBox:<$local_part@$domain>Domain:<$acl_m_msg_domain>Realm:<$acl_m_msg_realm>
  deny
    ! condition = $acl_c_st_f
    condition = ${extract {afUSMTPDMBIsAbsent}{$acl_m_mb_d}{true}{false}}
    message = U_MBA_M
  warn
    condition = $acl_c_st_f
    condition = ${extract {afUSMTPDMBIsAbsent}{$acl_m_mb_d}{true}{false}}
    set acl_c_st_m = U_MBA_M
  warn
    set acl_m_bwl_user_f = true
  require
    set acl_c_bwl_ldap_dn = U_SMTP_R_C_D_MB_LDAP_DN
    set acl_c_bwl_category_m = user recipient policy
    logwrite = DEBUG: user bwl: $acl_c_bwl_category_m
    set acl_c_bwl_acl = sh_bwl_acl
    acl = bwl_acl
    set acl_c_bwl_acl = cert_bwl_acl
    acl = bwl_acl
    set acl_c_bwl_acl = sa_bwl_acl
    acl = bwl_acl
  require
    set acl_c_bwl_ldap_dn = U_SMTP_R_C_D_LDAP_DN
    set acl_c_bwl_category_m = user domain policy
    logwrite = DEBUG: user bwl: $acl_c_bwl_category_m
    set acl_c_bwl_acl = sh_bwl_acl
    acl = bwl_acl
    set acl_c_bwl_acl = cert_bwl_acl
    acl = bwl_acl
    set acl_c_bwl_acl = sa_bwl_acl
    acl = bwl_acl
  require
    set acl_c_bwl_ldap_dn = U_SMTP_R_C_LDAP_DN
    set acl_c_bwl_category_m = user policy
    logwrite = DEBUG: user bwl: $acl_c_bwl_category_m
    set acl_c_bwl_acl = sh_bwl_acl
    acl = bwl_acl
    set acl_c_bwl_acl = cert_bwl_acl
    acl = bwl_acl
    set acl_c_bwl_acl = sa_bwl_acl
    acl = bwl_acl
  accept

data_acl:
  accept

begin routers
dnslookup:
  driver = dnslookup
  domains = ! +local_domains
  transport = remote_smtp
  ignore_target_hosts = 0.0.0.0 : 127.0.0.0/8
  no_more
system_aliases:
  driver = redirect
  allow_fail
  allow_defer
  data = ${lookup{$local_part}lsearch{/etc/aliases}}
  user = mailnull
  group = mail
  file_transport = address_file
  pipe_transport = address_pipe
userforward:
  driver = redirect
  check_local_user
  file = $home/.forward
  no_verify
  no_expn
  check_ancestor
  file_transport = address_file
  pipe_transport = address_pipe
  reply_transport = address_reply
  condition = ${if exists{$home/.forward} {yes} {no} }
localuser:
  driver = accept
  check_local_user
  transport = local_delivery
  cannot_route_message = Unknown user
begin transports
remote_smtp:
  driver = smtp
local_delivery:
  driver = appendfile
  file = /var/mail/$local_part
  delivery_date_add
  envelope_to_add
  return_path_add
  group = mail
  user = $local_part
  mode = 0660
  no_mode_fail_narrower
address_pipe:
  driver = pipe
  return_output
address_file:
  driver = appendfile
  delivery_date_add
  envelope_to_add
  return_path_add
address_reply:
  driver = autoreply

begin retry
*                      *           F,2h,15m; G,16h,1h,1.5; F,4d,6h

begin rewrite

begin authenticators
