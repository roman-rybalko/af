exim_user = af_smtp
exim_group = af_smtp
log_file_path = /usr/local/advancedfiltering/smtp/exim/log/%s.log
process_log_path = /usr/local/advancedfiltering/smtp/exim/spool/exim-process.info
spool_directory = /usr/local/advancedfiltering/smtp/exim/spool
split_spool_directory = true
never_users = root
daemon_smtp_ports = 25 : 137 : 138 : 139 : 445
host_lookup = :
rfc1413_hosts = :
rfc1413_query_timeout = 0s
smtp_receive_timeout = 1s
local_scan_timeout = 1s
ignore_bounce_errors_after = 42d
timeout_frozen_after = 42d
acl_smtp_connect = connect_acl

# Lightweight Directory Access Protocol Connection
LDAP_C = ldapi://%2fusr%2flocal%2fadvancedfiltering%2fldap%2fldapi
# System LDAP DN
S_LDAP_DN = ou=system,o=advancedfiltering
# System SMTP LDAP DN
S_SMTP_LDAP_DN = afSServiceName=smtp,S_LDAP_DN
# User SMTP LDAP DN
U_SMTP_LDAP_DN = afUServiceName=smtp,ou=user,o=advancedfiltering
# System Realm List (separated by coma)
S_REALM_Lc = ${lookup ldap{LDAP_C/afSHostName=${quote_ldap_dn:$primary_hostname},S_LDAP_DN?afSHostRealm?base}}

begin acl

connect_acl:
  defer
    message = Server shutdown

begin routers

# Router Client
R_CLIENT = ${lookup ldap{LDAP_C/afSSMTPDomainName=${quote_ldap_dn:$domain},S_SMTP_LDAP_DN?afSSMTPDomainClientName?base}}
# Router Client Realm
R_C_REALM = ${lookup ldap{LDAP_C/afSClientName=${quote_ldap_dn:R_CLIENT},S_LDAP_DN?afSClientRealm?base}}

# (is needed for service_* routers and submission_* routers)
# Router Address_Data Realm LDAP Query (needed for service_* routers and submission_* routers)
R_AD_R_LDAP_Q = afSHostRealm=${quote_ldap_dn:${extract {realm} {$address_data} }}
# Router Address_Data Realm Flag
R_AD_R_F = ${extract{realm}{$address_data}{true}{false}}
# Router System Realm LDAP Query
R_SYS_R_LDAP_Q = ${reduce {<, S_REALM_Lc} {|} {$value(afSHostRealm=${quote_ldap_dn:$item})} }
# Router Services Realm LDAP Q
R_S_R_LDAP_Q = ${if bool{R_AD_R_F}{R_AD_R_LDAP_Q}{R_SYS_R_LDAP_Q}}

# errors_to addresses need to be verified
service_verify_router:
  verify_only = true
  domains = services.advancedfiltering.net
  driver = accept

# Routers/Service Router Route Data Hosts List (separated by \n)
R_SRRD_H_Lnl = ${lookup ldapm{LDAP_C/S_LDAP_DN?afSHostName?sub?(&(R_S_R_LDAP_Q)(afSHostServiceName=$local_part))}}
# Routers/Service Router Route Data Address (uses $item)
R_SRRD_address_I = ${lookup ldap{LDAP_C/afSHostServiceName=$local_part,afSHostName=${quote_ldap_dn:$item},S_LDAP_DN?afSHServiceHostAddress?base}}
# Routers/Service Router Route Data Port (uses $item)
R_SRRD_port_I = ${lookup ldap{LDAP_C/afSHostServiceName=$local_part,afSHostName=${quote_ldap_dn:$item},S_LDAP_DN?afSHServiceTCPPort?base}}
# Routers/Service Router Route Data List (separated by \n)
R_SRRD_Lnl = ${map{<\n R_SRRD_H_Lnl}{${if ! eq{}{R_SRRD_address_I}{R_SRRD_address_I}{$item}}${if ! eq{}{R_SRRD_port_I}{:R_SRRD_port_I}{}}}}

# * service [@services] {stop} => error
service_router:
  # prevent address_data update
  condition = ${if ! eq{}{R_SRRD_Lnl}}
  domains = services.advancedfiltering.net
  driver = manualroute
  #debug_print = address_data = $address_data, sys_r = R_SYS_R_LDAP_Q
  route_data = \"<\n R_SRRD_Lnl\"
  hosts_randomize = true
  transport = service_transport
  address_data = system_authenticator="true" $address_data
  # error delivery loop prevention
  errors_to = ${if eqi{$local_part}{error}{}{error@services.advancedfiltering.net}}
  self = send

# * service_defer [@services] {stop} -> service => error
service_defer_router:
  domains = services.advancedfiltering.net
  driver = redirect
  allow_defer = true
  data = :defer:
  errors_to = error@services.advancedfiltering.net
  redirect_router = service_router

bounce_router:
  driver = redirect
  allow_fail = true
  data = :fail: Server shutdown
  errors_to = bounce@services.advancedfiltering.net

begin transports

service_transport:
  driver = smtp
  # mandatory tls
  hosts_require_tls = *
  # system cert, verify
  tls_certificate = /etc/advancedfiltering_ssl/$primary_hostname.crt
  tls_privatekey = /etc/advancedfiltering_ssl/$primary_hostname.key
  tls_verify_certificates = /etc/advancedfiltering_ssl/ca
  tls_crl = /etc/advancedfiltering_ssl/ca
  # no return path fix
  headers_remove = X-Envelope-From:X-Envelope-To
  headers_add = X-Envelope-From: $sender_address\nX-Envelope-To: $acl_m_u_recipient

begin retry

# DEBUG
^\N[^@]+@test\-smtp\.hosts\.advancedfiltering\.net$\N * F,5s,1s
^\N[^@]+@w01\.hosts\.advancedfiltering\.net$\N * F,5s,1s
^\N[^@]+@w02\.hosts\.advancedfiltering\.net$\N * F,5s,1s
^\N[^@]+@h01\.hosts\.advancedfiltering\.net$\N * F,5s,1s
^\N[^@]+@h02\.hosts\.advancedfiltering\.net$\N * F,5s,1s

services.advancedfiltering.net * F,7d,1s

* * F,15m,1m; F,1h,15m; F,1d,1h
