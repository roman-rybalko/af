exim_user = af_submission
exim_group = af_submission
log_file_path = /usr/local/advancedfiltering/submission/exim/log/%s.log
process_log_path = /usr/local/advancedfiltering/submission/exim/spool/exim-process.info
spool_directory = /usr/local/advancedfiltering/submission/exim/spool
split_spool_directory = true
never_users = root
daemon_smtp_ports = 587
# требуется для sys_trustedhost
host_lookup = *
rfc1413_hosts = :
rfc1413_query_timeout = 0s
smtp_receive_timeout = 42s
local_scan_timeout = 15s
ignore_bounce_errors_after = 2d
timeout_frozen_after = 7d
acl_smtp_helo = helo_acl
acl_smtp_mail = mail_acl
acl_smtp_rcpt = rcpt_acl
acl_smtp_data = data_acl
# * Режим submission (добавить From если нет, Sender, Date, Message-ID) без проверки From:, continue
local_from_check = false
smtp_banner = submission.services.advancedfiltering.net ESMTP

# Lightweight Directory Access Protocol Connection
LDAP_C = ldapi://%2fusr%2flocal%2fadvancedfiltering%2fldap%2fldapi

# System LDAP DN
S_LDAP_DN = ou=system,o=advancedfiltering

# System SMTP LDAP DN
S_SMTP_LDAP_DN = afSServiceName=smtp,S_LDAP_DN
# System Submission LDAP DN
S_Submission_LDAP_DN = afSServiceName=submission,S_LDAP_DN

# User Submission LDAP DN
U_Submission_LDAP_DN = afUServiceName=submission,ou=user,o=advancedfiltering

# System Realm List (separated by coma)
S_REALM_Lc = ${lookup ldap{LDAP_C/afSHostName=${quote_ldap_dn:$primary_hostname},S_LDAP_DN?afSHostRealm?base}}

# System Trusted Host Raw Flag
S_TH_R_F = ${if forany{<, ${lookup ldap{LDAP_C/afSHostName=${quote_ldap_dn:$sender_host_name},S_LDAP_DN?afSHostRealm?base}}}{inlist{$item}{<, S_REALM_Lc}}{true}{false}}
# System Trusted Host Flag
S_TH_F = ${if eq{}{$sender_host_name}{false}{S_TH_R_F}}

# User Authenticated Client Name by SMTP AUTH
U_CLIENT_login_D = $authenticated_id

# User Authenticated Client Name by TLS SNI (DNS name: submission.xxx.clients.advancedfiltering.net, submission2.xxx.clients.advancedfiltering.net)
# ... Raw Data
U_CLIENT_sni_R_D = ${sg{${sg{$tls_in_sni}{submission\\d*\\.}{}}}{\\.clients\\.advancedfiltering\\.net}{}}
# ... Flag
U_CLIENT_sni_F = ${if ! bool_lax{${sg{$tls_in_sni}{submission\\d*\\.\\S+\\.clients\\.advancedfiltering\\.net}{}}}}
# .. Data
U_CLIENT_sni_D = ${if bool{U_CLIENT_sni_F}{U_CLIENT_sni_R_D}{}}

# User Authenticated Client Name by IP
U_CLIENT_ip_D = ${lookup ldap{LDAP_C/afSSubmissionAuthHostAddress=${quote_ldap_dn:$sender_host_address},S_Submission_LDAP_DN?afSSubmissionAuthClientName?base}}

# User login
U_CLIENT_D = ${if eq{}{U_CLIENT_login_D}{${if eq{}{U_CLIENT_sni_D}{${if eq{}{U_CLIENT_ip_D}{}{U_CLIENT_ip_D}}}{U_CLIENT_sni_D}}}{U_CLIENT_login_D}}

# User Realm
U_REALM_D = ${lookup ldap{LDAP_C/afSClientName=${quote_ldap_dn:U_CLIENT_D},S_LDAP_DN?afSClientRealm?base}}

# User Client Certificate Raw Flag
U_C_C_R_F = ${lookup ldap{LDAP_C/afUClientName=${quote_ldap_dn:U_CLIENT_D},afUServiceRealm=${quote_ldap_dn:U_REALM_D}+U_Submission_LDAP_DN?afUSubmissionAuthHaveCertificate?base}}
# User Client Certificate
# проверяем, определился ли логин клиента, т.к. при SMTP AUTH логин до STARTTLS не известен
U_C_C_F = ${if eq{}{U_CLIENT_D}{}{U_C_C_R_F}}

# ** trusted_host => внутренний сертификат (hostname.crt)
# System Host Certificate
S_H_C_D = /etc/advancedfiltering_ssl/$primary_hostname.crt
# System Host Certificate Key
S_H_CK_D = /etc/advancedfiltering_ssl/$primary_hostname.key
# System Host Certificate Authority
S_H_CA_D = /etc/advancedfiltering_ssl/ca

# ** задан клиентский сертификат => клиентский сертификат
# User Client Certificate
U_C_C_D = /usr/local/advancedfiltering/submission/ssl/U_CLIENT_D.crt
U_C_CK_D = /usr/local/advancedfiltering/submission/ssl/U_CLIENT_D.key
U_C_CA_D = /usr/local/advancedfiltering/submission/ssl/U_CLIENT_D.ca

# ** не задан клиентский сертификат => внешний сертификат (submission.services.advancedfiltering.net.crt)
# System Service Certificate
S_S_C_D = /usr/local/advancedfiltering/ssl/submission.services.advancedfiltering.net.crt
S_S_CK_D = /usr/local/advancedfiltering/ssl/submission.services.advancedfiltering.net.key
S_S_CA_D = /usr/local/advancedfiltering/ssl/ca

tls_advertise_hosts = *
tls_try_verify_hosts = *
# * установить сертификат
tls_certificate = ${if bool{S_TH_F}{S_H_C_D}{${if bool{U_C_C_F}{U_C_C_D}{S_S_C_D}}}}
tls_privatekey = ${if bool{S_TH_F}{S_H_CK_D}{${if bool{U_C_C_F}{U_C_CK_D}{S_S_CK_D}}}}
tls_verify_certificates = ${if bool{S_TH_F}{S_H_CA_D}{${if bool{U_C_C_F}{U_C_CA_D}{S_S_CA_D}}}}
tls_crl = ${if bool{S_TH_F}{S_H_CA_D}{${if bool{U_C_C_F}{U_C_CA_D}{S_S_CA_D}}}}

# * user_hidereceived => Удалить заголовки Received, continue
received_header_text = Received: \
  ${if bool{$acl_m_u_hr_f}{\
    from 192.168.0.42 by $primary_hostname \
  }{\
    from ${if def:sender_rcvhost {$sender_rcvhost}{192.168.0.2}} by $primary_hostname \
  }}\
  ${if def:received_protocol {with $received_protocol }{}}\
  id $message_exim_id

# * message_size >= sys_maxmessagesize => 5xx ...
message_size_limit = ${lookup ldap{LDAP_C/S_Submission_LDAP_DN?afSSubmissionMaxMessageSize?base}}

# User Submission Realm DN
U_Submission_R_LDAP_DN = afUServiceRealm=${quote_ldap_dn:$acl_m_u_realm}+U_Submission_LDAP_DN
# User Submission Realm Client DN
U_Submission_R_C_LDAP_DN = afUClientName=${quote_ldap_dn:$acl_m_u_client},U_Submission_R_LDAP_DN
# User Submission Realm Client Domain DN
U_Submission_R_C_D_LDAP_DN = afUSubmissionDomainName=${quote_ldap_dn:$acl_m_u_domain},U_Submission_R_C_LDAP_DN
# User Submission Realm Client Domain Mail Box DN
U_Submission_R_C_D_MB_LDAP_DN = afUSubmissionDMBLocalPart=${quote_ldap_dn:${local_part:$acl_m_u_sender}},U_Submission_R_C_D_LDAP_DN

begin acl

helo_acl:

  # ** вывести аутентификационную информацию
  accept
    condition = S_TH_F
    message = submission.services.advancedfiltering.net Hallo TH
  accept
    condition = ${if ! eq{}{U_CLIENT_login_D}}
    message = submission.services.advancedfiltering.net Hallo U_CLIENT_login_D SMTP AUTH
  accept
    condition = ${if ! eq{}{U_CLIENT_sni_D}}
    condition = ${if bool{U_C_C_F}}
    condition = $tls_in_certificate_verified
    message = submission.services.advancedfiltering.net Hallo U_CLIENT_sni_D TLS SNI
  accept
    condition = ${if ! eq{}{U_CLIENT_ip_D}}
    message = submission.services.advancedfiltering.net Hallo U_CLIENT_ip_D IP
  accept
    message = submission.services.advancedfiltering.net

# * идентифицировать клиента
# deny => deny, accept => continue, defer => defer
auth_acl:

  # ** trusted_host && !certificate_verified => 5xx Trusted host certificate verification failed, stop
  deny
    condition = S_TH_F
    ! condition = $tls_in_certificate_verified
    message = Trusted host certificate verification failed

  # ** trusted_host => continue
  accept
    condition = S_TH_F

  # ** использован клиентский сертификат && !certificate_verified => 5xx Client certificate verification failed, stop
  deny
    condition = ${if and{{eq{}{U_CLIENT_login_D}}{! eq{}{U_CLIENT_D}}}}
    condition = ${if bool{U_C_C_F}}
    ! condition = $tls_in_certificate_verified
    message = Client certificate verification failed

  # ** логин определился => continue
  accept
    condition = ${if ! eq{}{U_CLIENT_D}}

  # ** 5xx Authentication needed, stop
  deny
    message = Authentication needed

# ** авторизация адреса отправителя => 5xx Authenticated user {user} may not use sender address {sender_address}, stop
# *** authz = trustedhost/mbox/domain/client/none
# accept => continue, deny => deny
sender_authz_acl:

  # trustedhost
  accept
    condition = S_TH_F
    set acl_m_u_authz = trustedhost

  # mbox
  accept
    condition = ${if ! eq{}{${local_part:U_CLIENT_D}}}
    condition = ${if ! eq{}{${domain:U_CLIENT_D}}}
    condition = ${if eq{$acl_m_u_sender}{U_CLIENT_D}}
    set acl_m_u_authz = mbox

  # mbox orig or alias auth orig
  accept
    condition = ${if ! eq{}{${local_part:U_CLIENT_D}}}
    condition = ${if ! eq{}{${domain:U_CLIENT_D}}}
    condition = ${if eq{${local_part:$acl_m_u_sender}@$acl_m_u_domain}{U_CLIENT_D}}
    set acl_m_u_authz = mbox

  # mbox orig or alias auth alias
  accept
    condition = ${if ! eq{}{${local_part:U_CLIENT_D}}}
    condition = ${if ! eq{}{${domain:U_CLIENT_D}}}
    condition = ${if eq{${local_part:$acl_m_u_sender}@$acl_m_u_domain}{${local_part:U_CLIENT_D}@${lookup ldap{LDAP_C/afUSubmissionDomainName=${quote_ldap_dn:${domain:U_CLIENT_D}},U_Submission_R_C_LDAP_DN?afUSubmissionDomainAliasName?base}}}}
    set acl_m_u_authz = mbox

  # domain
  accept
    condition = ${if eq{${domain:$acl_m_u_sender}}{U_CLIENT_D}}
    set acl_m_u_authz = domain

  # domain orig or alias auth orig
  accept
    condition = ${if eq{$acl_m_u_domain}{U_CLIENT_D}}
    set acl_m_u_authz = domain

  # domain orig or alias auth alias
  accept
    condition = ${if eq{$acl_m_u_domain}{${lookup ldap{LDAP_C/afUSubmissionDomainName=${quote_ldap_dn:U_CLIENT_D},U_Submission_R_C_LDAP_DN?afUSubmissionDomainAliasName?base}}}}
    set acl_m_u_authz = domain

  # client
  accept
    condition = ${if eq{$acl_m_u_client}{U_CLIENT_D}}
    set acl_m_u_authz = client

  # none
  deny
    set acl_m_u_authz = none

mbxchk_acl:
  accept
    condition = ${run{/usr/local/advancedfiltering/submission/mbxchk/logexec/logexec-cli.sh AdvancedFiltering/MailBox/Check/AFsmtp<$acl_m_u_sender>}{true}{false}}
    logwrite = AdvancedFiltering/MailBox/submission/Add<$acl_m_u_sender>
  warn
    condition = ${if ! eq{1}{$runrc}}
    logwrite = :panic: AdvancedFiltering/MailBox/Check/AFsmtp<$acl_m_u_sender>: $value
  deny

# System MailBox Timeout Data
S_MBTO_D = ${lookup ldap{LDAP_C/S_Submission_LDAP_DN?afSSubmissionMailBoxTimeout?base}}
# System MailBox Cutoff Time Data
S_MBCT_D = ${eval10:$tod_epoch-S_MBTO_D}

# * проверка адреса отправителя (user_sender_address)
# deny => deny, accept => continue, defer => defer
sender_acl:

  # ** домен не задан => 5xx {user_sender_descr} address {user_sender_address} does not have a domain, stop
  deny
    # User Domain
    set acl_m_u_domain = ${domain:$acl_m_u_sender}
    condition = ${if eq{}{$acl_m_u_domain}}
    message = $acl_m_u_sender_desc address $acl_m_u_sender does not have a domain

  # ** домен не зарегистрирован => 5xx {user_sender_descr} domain {domain:user_sender_address} is not in service, stop
  deny
    # User Client name/id
    set acl_m_u_client = ${lookup ldap{LDAP_C/afSSMTPDomainName=${quote_ldap_dn:$acl_m_u_domain},S_SMTP_LDAP_DN?afSSMTPDomainClientName?base}}
    condition = ${if eq{}{$acl_m_u_client}}
    message = $acl_m_u_sender_desc domain $acl_m_u_domain is not in service

  # ** не наш realm домена => 4xx {user_sender_descr} domain {domain:user_sender_address} is moved, please try another host, stop
  defer
    # User Realm
    set acl_m_u_realm = ${lookup ldap{LDAP_C/afSClientName=${quote_ldap_dn:$acl_m_u_client},S_LDAP_DN?afSClientRealm?base}}
    ! condition = ${if inlist{$acl_m_u_realm}{<, S_REALM_Lc}}
    message = $acl_m_u_sender_desc domain $acl_m_u_domain is moved, please try another host
    logwrite = Moved: address=$acl_m_u_sender domain=$acl_m_u_domain client=$acl_m_u_client realm=$acl_m_u_realm realm_list=S_REALM_Lc

  # ** домен не принимает почту (verify = sender) => 5xx {user_sender_descr} domain {domain:user_sender_address} does not accept mail, stop
  deny
    ! verify = sender=$acl_m_u_sender
    message = $acl_m_u_sender_desc domain $acl_m_u_domain does not accept mail

  # ** синоним => user_domain, continue
  warn
    condition = ${lookup ldap{LDAP_C/U_Submission_R_C_D_LDAP_DN?afUSubmissionDomainAliasName?base}{true}{false}}
    set acl_m_u_domain = ${lookup ldap{LDAP_C/U_Submission_R_C_D_LDAP_DN?afUSubmissionDomainAliasName?base}}

  # ** двойной синоним => 4xx {user_sender_descr} domain {domain:user_sender_address} (alias to {user_domain}) has configuration problem (double domain alias), panic, stop
  defer
    condition = ${lookup ldap{LDAP_C/U_Submission_R_C_D_LDAP_DN?afUSubmissionDomainAliasName?base}{true}{false}}
    message = $acl_m_u_sender_desc domain ${domain:$acl_m_u_sender} (alias to $acl_m_u_domain) has configuration problem (double domain alias)
    logwrite = :panic: Double domain alias: sender=$acl_m_u_sender client=$acl_m_u_client realm=$acl_m_u_realm domain=${domain:$acl_m_u_sender} alias=$acl_m_u_domain

  # ** не найден в ou=user => 4xx {user_sender_descr} domain {domain:user_sender_address} {синоним?(alias to {user_domain}):""} is replicating, please try again later, stop
  defer
    ! condition = ${lookup ldap{LDAP_C/U_Submission_R_C_D_LDAP_DN?objectClass?base}{true}{false}}
    message = $acl_m_u_sender_desc domain ${domain:$acl_m_u_sender}${if eq{${domain:$acl_m_u_sender}}{$acl_m_u_domain}{}{ (alias to $acl_m_u_domain)}} is replicating, please try again later

  # ** не зарегистрирован и не проверяется адрес отправителя => 5xx {user_sender_descr} address {user_sender_address} {синоним?(alias to {user_domain}):""} does not exist, stop
  deny
    ! condition = ${lookup ldap{LDAP_C/U_Submission_R_C_D_MB_LDAP_DN?afUSubmissionDMBLocalPart?base}{true}{false}}
    ! acl = mbxchk_acl
    message = $acl_m_u_sender_desc address $acl_m_u_sender${if eq{${domain:$acl_m_u_sender}}{$acl_m_u_domain}{}{ (alias to $acl_m_u_domain)}} does not exist

  # ** просрочен адрес отправителя => записать в лог задание на проверку, flag_expired, continue
  warn
    set acl_m_u_exp_f = false
    condition = ${lookup ldap{LDAP_C/U_Submission_R_C_D_MB_LDAP_DN?afUSubmissionDMBLocalPart?base?(afUSubmissionDMBTimeUpdated<=S_MBCT_D)}{true}{false}}
    logwrite = AdvancedFiltering/MailBox/Check/AFsmtp<$acl_m_u_sender> ? AdvancedFiltering/MailBox/submission/Update<$acl_m_u_sender> : AdvancedFiltering/MailBox/submission/Delete<$acl_m_u_sender>
    set acl_m_u_exp_f = true

  # ** авторизация адреса отправителя => 5xx Authenticated user {user} may not use {user_sender_descr} address {user_sender_address}, stop
  deny
    ! acl = sender_authz_acl
    message = Authenticated user U_CLIENT_D may not use $acl_m_u_sender_desc address $acl_m_u_sender

  # ** нет DMARC (dmarc_verifier.pl "{domain:user_sender_address}") => 5xx DMARC is absent for {user_sender_descr} domain {domain:user_sender_address} ({error}), stop
  deny
    ! condition = ${run{/usr/local/advancedfiltering/submission/exim/dmarc_verifier.pl ${domain:$acl_m_u_sender}}{true}{false}}
    message = DMARC is absent for $acl_m_u_sender_desc domain ${domain:$acl_m_u_sender} (${if eq{1}{$runrc}{$value}{internal error}})
    logwrite = ${if eq{1}{$runrc}{}{:main,panic: }}DMARC: $value

  # ** continue
  accept

# Load user configuration data
# accept - found, deny - not found
conf_acl:
  accept
    condition = ${if ! eq{}{$acl_m_u_sender}}
    condition = ${if ! eq{}{$acl_m_u_domain}}
    condition = ${if ! eq{}{$acl_m_u_realm}}
    condition = ${if ! eq{}{$acl_m_u_client}}
    set acl_m_u_conf_value = ${lookup ldap{LDAP_C/U_Submission_R_C_D_MB_LDAP_DN?$acl_m_u_conf_name?base}}
    condition = ${if ! eq{}{$acl_m_u_conf_value}}
    set acl_m_u_conf_source = mbox
  accept
    condition = ${if ! eq{}{$acl_m_u_domain}}
    condition = ${if ! eq{}{$acl_m_u_realm}}
    condition = ${if ! eq{}{$acl_m_u_client}}
    set acl_m_u_conf_value = ${lookup ldap{LDAP_C/U_Submission_R_C_D_LDAP_DN?$acl_m_u_conf_name?base}}
    condition = ${if ! eq{}{$acl_m_u_conf_value}}
    set acl_m_u_conf_source = domain
  accept
    condition = ${if ! eq{}{$acl_m_u_realm}}
    condition = ${if ! eq{}{$acl_m_u_client}}
    set acl_m_u_conf_value = ${lookup ldap{LDAP_C/U_Submission_R_C_LDAP_DN?$acl_m_u_conf_name?base}}
    condition = ${if ! eq{}{$acl_m_u_conf_value}}
    set acl_m_u_conf_source = client
  deny

mail_acl:

  # * идентифицировать клиента
  deny
    ! acl = auth_acl

  # * присутствует адрес отправителя => проверка адреса отправителя (Sender), continue
  deny
    condition = ${if ! eq{}{$sender_address}}
    set acl_m_u_sender_desc = Envelope-From
    set acl_m_u_sender = $sender_address
    ! acl = sender_acl

  # * trusted_host && отсутствует адрес отправителя => 5xx Trusted host is not allowed to send status notification (empty Envelope-Sender), stop
  deny
    condition = S_TH_F
    condition = ${if eq{}{$sender_address}}
    message = Trusted host is not allowed to send status notification (empty Envelope-Sender)
    logwrite = :main,panic: TH: empty Envelope-Sender hostname=$sender_host_name ip=$sender_host_address

  # * отсутствует адрес отправителя => flag_spamsender, continue
  warn
    # User SpamSender flag
    set acl_m_u_ss_f = false
    condition = ${if eq{}{$sender_address}}
    set acl_m_u_ss_f = true
    set acl_m_u_client = U_CLIENT_D
    set acl_m_u_authz = client

  # * загрузить пользовательсике настройки (mbox/domain/client) => user_hidereceived, flag_spamsender, continue
  # afUSubmissionHideReceived
  warn
    # User Hide Received flag
    set acl_m_u_hr_f = false
    set acl_m_u_conf_name = afUSubmissionHideReceived
    acl = conf_acl
    set acl_m_u_hr_f = $acl_m_u_conf_value
    # User Hide Received Source
    set acl_m_u_hr_s_d = $acl_m_u_conf_source
  # afUSubmissionSpamSender
  warn
    ! condition = ${if bool{$acl_m_u_ss_f}}
    set acl_m_u_conf_name = afUSubmissionSpamSender
    acl = conf_acl
    set acl_m_u_ss_f = $acl_m_u_conf_value
    # User SpamSender Source
    set acl_m_u_ss_s_d = $acl_m_u_conf_source

  # * user_hidereceived => Удалить заголовки Received, continue
  warn
    condition = ${if bool{$acl_m_u_hr_f}}
    remove_header = Received

  # * Режим submission (добавить From если нет, Sender, Date, Message-ID) без проверки From:, continue
  warn
    control = submission

  # * 2xx {orig_sender_address} {client} {(authz)trustedhost/mbox/domain/client/none} {flag_spamsender} {user_hidereceived} {flag_expired}, stop
  accept
    message = ${if eq{}{$acl_m_u_sender}{none}{${local_part:$acl_m_u_sender}@$acl_m_u_domain}} $acl_m_u_client $acl_m_u_authz${if bool{$acl_m_u_ss_f}{ SS:$acl_m_u_ss_s_d}{}}${if bool{$acl_m_u_hr_f}{ HR:$acl_m_u_hr_s_d}{}}${if bool{$acl_m_u_exp_f}{ EXP}{}}

rcpt_acl:

  # * домен не принимает почту (verify = recipient) => 5xx Recipient domain {domain} does not accept mail, stop
  deny
    ! verify = recipient
    message = Recipient domain $domain does not accept mail

  # * 2xx, stop
  accept

# System Trusted Message Size
S_TMS_D = ${lookup ldap{LDAP_C/S_Submission_LDAP_DN?afSSubmissionTrustedMessageSize?base}}

# User Submission DataBase LDAP DN
U_SDB_LDAP_DN = afUServiceRealm=${quote_ldap_dn:$acl_m_u_realm}+afUServiceName=submissiondb,ou=user,o=advancedfiltering
# User Submission DB Encoded Message ID
U_SDB_EMID_D = ${run{/usr/local/advancedfiltering/submission/exim/mid_list_encoder.pl $bheader_Message-ID:}{$value}{}}
# User Submission DataBase Sender
U_SDB_S_D = ${lookup ldap{LDAP_C/afUSMTPMessageId=${quote_ldap_dn:U_SDB_EMID_D},U_SDB_LDAP_DN?afUSMTPMessageSenderMailAddress?base}}
# User Headers Sender
U_H_S_D = ${if eq{}{$bheader_Reply-To:}{${address:$bheader_From:}}{${address:$bheader_Reply-To:}}}

# User SMTP DataBase LDAP DN
U_SMTPDB_LDAP_DN = afUServiceRealm=${quote_ldap_dn:$acl_m_u_realm}+afUServiceName=smtpdb,ou=user,o=advancedfiltering
# User SMTP DB Encoded Message ID
U_SMTPDB_EMID_L = ${run{/usr/local/advancedfiltering/submission/exim/mid_list_encoder.pl $bheader_In-Reply-To: $bheader_References:}{$value}{}}
# User SMTP DB Sender list
U_SMTPDB_S_L = ${map{U_SMTPDB_EMID_L}{${lookup ldap{LDAP_C/afUSMTPMessageId=${quote_ldap_dn:$item},U_SMTPDB_LDAP_DN?afUSMTPMessageSenderMailAddress?base}}}}

data_acl:
  # $recipients не доступен в routers
  warn
    set acl_m_u_recipients = $recipients

  # * синтаксис заголовоков некорректен (verify = header_syntax) => 5xx Invalid message headers (Sender/From/Reply-To/To/Cc/Bcc), stop
  deny
    ! verify = header_syntax
    message = Invalid message headers (Sender/From/Reply-To/To/Cc/Bcc)

  # * есть заголовок X-AdvancedFiltering-MessageData-Submission => 5xx Message loop detected, stop
  deny
    condition = ${if ! eq{}{$rheader_X-AdvancedFiltering-MessageData-Submission:}}
    message = Message loop detected:$rheader_X-AdvancedFiltering-MessageData-Submission:

  # * заголовок From: содержит несколько адресов или битый => 5xx Invalid "From:" header, stop
  deny
    condition = ${if eq{}{${address:$bheader_From:}}}
    message = Invalid "From:" header

  # * заголовок "From:" содержит один адрес => проверка адреса отправителя ("From:"), continue
  deny
    condition = ${if ! eq{}{${address:$bheader_From:}}}
    set acl_m_u_sender_desc = "From:"
    set acl_m_u_sender = ${address:$bheader_From:}
    ! acl = sender_acl

  # * DMARC не проверился (dmarc_verifier.pl "from domain" "spf domain" "dkim domain") => 5xx DMARC failed for ("From:") domain {domain:header_from}, stop
  deny
    ! condition = ${run{/usr/local/advancedfiltering/submission/exim/dmarc_verifier.pl ${domain:${address:$bheader_From:}} ${domain:$sender_address} ${domain:${address:$bheader_From:}}}{true}{false}}
    message = DMARC failed for ("From:") domain ${domain:${address:$bheader_From:}} (${if eq{1}{$runrc}{$value}{internal error}})
    logwrite = ${if eq{1}{$runrc}{}{:panic: }}DMARC: $value

  # * загрузить пользовательсике настройки (mbox/domain/client) => flag_spamsender, continue
  # afUSubmissionSpamSender
  warn
    ! condition = ${if bool{$acl_m_u_ss_f}}
    set acl_m_u_conf_name = afUSubmissionSpamSender
    acl = conf_acl
    set acl_m_u_ss_f = $acl_m_u_conf_value
    # User SpamSender Source
    set acl_m_u_ss_s_d = $acl_m_u_conf_source

  # * присутствует заголовок "Reply-To:" && содержит несколько адресов или битый => 5xx Invalid "Reply-To:" header, stop
  deny
    condition = ${if def:bheader_Reply-To:}
    condition = ${if eq{}{${address:$bheader_Reply-To:}}}
    message = Invalid "Reply-To:" header

  # * присутствует заголовок "Reply-To:" && домен в заголовке Reply-To: не принимает почту (verify = sender) => 5xx "Reply-To:" domain {domain:header_reply-to} does not accept mail, stop
  deny
    condition = ${if def:bheader_Reply-To:}
    ! verify = sender=${address:$bheader_Reply-To:}
    message = "Reply-To:" domain ${domain:${address:$bheader_Reply-To:}} does not accept mail

  # * message-id в БД но sender другой => 5xx Duplicate message, original sender {orig-sender}
  deny
    condition = ${if ! eq{}{U_SDB_S_D}}
    ! condition = ${if eq{U_H_S_D}{U_SDB_S_D}}
    message = Duplicate message, original sender U_SDB_S_D

  # * in-reply-to, references в БД и sender в {recipients} => flag_hamtrap, continue
  warn
    # User HamTrap flag
    set acl_m_u_ht_f = false
    condition = ${if forany{U_SMTPDB_S_L}{inlist{$item}{<, $recipients}}}
    set acl_m_u_ht_f = true

  # * msgsize >= sys_trustedmessagesize => flag_trustedmessagesize, continue
  warn
    set acl_m_u_tms_f = false
    condition = ${if >{$message_size}{S_TMS_D}}
    set acl_m_u_tms_f = true

  # * flag_hamtrap || flag_trustedmessagesize => log (submissiondb), continue
  warn
    condition = ${if or{{bool{$acl_m_u_ht_f}}{bool{$acl_m_u_tms_f}}}}
    logwrite = AdvancedFiltering/MessageID/submissiondb/Add<$acl_m_u_realm><U_SDB_EMID_D><U_H_S_D>

  # * 2xx {id=exim_msg_id} {orig_sender_address} {client} {(authz)trustedhost/mbox/domain/client/none} {flag_spamsender} {flag_hamtrap} {flag_trustedmessagesize} {flag_expired}, stop
  accept
    message = id=$message_exim_id ${if eq{}{$acl_m_u_sender}{none}{${local_part:$acl_m_u_sender}@$acl_m_u_domain}} $acl_m_u_client $acl_m_u_authz${if bool{$acl_m_u_ss_f}{ SS:$acl_m_u_ss_s_d}{}}${if bool{$acl_m_u_ht_f}{ HT}{}}${if bool{$acl_m_u_tms_f}{ TMS}{}}${if bool{$acl_m_u_exp_f}{ EXP}{}}

begin routers

# * service

# errors_to addresses need to be verified
service_verify_router:
  verify_only = true
  domains = services.advancedfiltering.net
  driver = accept

# Router User Realm LDAP Query
R_U_R_LDAP_Q = afSHostRealm=$acl_m_u_realm
# Router Host Realm LDAP Query
R_H_R_LDAP_Q = ${reduce{<, S_REALM_Lc}{|}{$value(afSHostRealm=${quote_ldap_dn:$item})}}
# Router Services Realm LDAP Query
R_S_R_LDAP_Q = ${if eq{}{$acl_m_u_realm}{R_H_R_LDAP_Q}{R_U_R_LDAP_Q}}

# Routers/Service Router Route Data Hosts List (separated by \n)
R_SRRD_H_Lnl = ${lookup ldapm{LDAP_C/S_LDAP_DN?afSHostName?sub?(&(R_S_R_LDAP_Q)(afSHostServiceName=$local_part))}}
# Routers/Service Router Route Data Address (uses $item)
R_SRRD_address_I = ${lookup ldap{LDAP_C/afSHostServiceName=$local_part,afSHostName=${quote_ldap_dn:$item},S_LDAP_DN?afSHServiceHostAddress?base}}
# Routers/Service Router Route Data Port (uses $item)
R_SRRD_port_I = ${lookup ldap{LDAP_C/afSHostServiceName=$local_part,afSHostName=${quote_ldap_dn:$item},S_LDAP_DN?afSHServiceTCPPort?base}}
# Routers/Service Router Route Data List (separated by \n)
R_SRRD_Lnl = ${map{<\n R_SRRD_H_Lnl}{${if bool_lax{R_SRRD_address_I}{R_SRRD_address_I}{$item}}${if bool_lax{R_SRRD_port_I}{:R_SRRD_port_I}{}}}}

# * service [@services] {stop} => error
service_router:
  domains = services.advancedfiltering.net
  driver = manualroute
  route_data = \"<\n R_SRRD_Lnl\"
  hosts_randomize = true
  transport = service_transport
  # error delivery loop prevention
  errors_to = ${if eqi{$local_part}{error}{}{error@services.advancedfiltering.net}}
  self = send

# * service_defer [@services] {stop} -> service => error
service_defer_router:
  domains = services.advancedfiltering.net
  driver = redirect
  allow_defer = true
  data = :defer:
  errors_to = error@services.advancedfiltering.net
  redirect_router = service_router

# * internet_verify {stop} => bounce
internet_verify_router:
  verify_only = true
  driver = dnslookup
  errors_to = bounce@services.advancedfiltering.net
  check_srv = smtp
  self = send
  more = false

# * hamtrap [flag_hamtrap] {continue} -> service => error
hamtrap_router:
  condition = $acl_m_u_ht_f
  driver = redirect
  data = hamtrap@services.advancedfiltering.net
  errors_to = error@services.advancedfiltering.net
  redirect_router = service_router
  headers_remove = X-Envelope-From:X-Envelope-To
  headers_add = X-Envelope-From: $sender_address\nX-Envelope-To: $acl_m_u_recipients
  unseen = true

# * mailproc [!flag_trustedmessagesize && !flag_hamtrap] {continue} -> service => error
mailproc_router:
  condition = ${if ! bool{$acl_m_u_tms_f}}
  condition = ${if ! bool{$acl_m_u_ht_f}}
  driver = redirect
  data = mailproc@services.advancedfiltering.net
  errors_to = error@services.advancedfiltering.net
  redirect_router = service_router
  headers_remove = X-Envelope-From:X-Envelope-To
  headers_add = X-Envelope-From: $sender_address\nX-Envelope-To: $acl_m_u_recipients
  unseen = true

# Router MessageData Submission Info
R_MDS_I_D = $acl_m_u_client $sender_address $message_exim_id $address_data
# Router MessageData Submission Key
R_MDS_K_D = l8JI6T7kctCno3lL44hqNOQ0NnWvjpVZn4WCFvuBxp
# Router MessageData Submission Header
R_MDS_H_D = ${str2b64:R_MDS_I_D ${md5:R_MDS_I_D R_MDS_K_D}}

# Router general LDAP DN
R_LDAP_DN = ""

# Router Copy Target List (separated by coma)
R_CT_Lc = ""

# Router Copy Sender Data
R_CS_D = ""

# * backup_rcpt {continue} -> internet >> backup_end => error
R_LDAP_DN == U_Submission_R_C_D_MB_LDAP_DN
R_CS_D == $sender_address
# the same for all backup_ routers
R_CT_Lc == ${lookup ldap{LDAP_C/R_LDAP_DN?afUSubmissionBackupMailAddress?base}}
backup_rcpt_router:
  # prevent address_data update
  condition = ${if ! eq{}{R_CT_Lc}}
  driver = redirect
  data = R_CT_Lc
  address_data = sender=R_CS_D $address_data
  errors_to = error@services.advancedfiltering.net
  redirect_router = internet_router
  unseen = true
backup_rcpt_pass_router:
  condition = ${if ! eq{}{R_CT_Lc}}
  driver = redirect
  data = $local_part@$domain
  # remove the first (new) key
  address_data = ${sg{$address_data}{^\\s*\\S+\\s*}{}}
  errors_to = error@services.advancedfiltering.net
  redirect_router = backup_end_router

# * backup_client {continue} -> internet >> backup_end => error
R_LDAP_DN == U_Submission_R_C_D_LDAP_DN
R_CS_D == ${lookup ldap{LDAP_C/R_LDAP_DN?afUSubmissionDomainTechMailAddress?base}}
# the same for all backup_ routers
R_CT_Lc == ${lookup ldap{LDAP_C/R_LDAP_DN?afUSubmissionBackupMailAddress?base}}
backup_domain_router:
  # prevent address_data update
  condition = ${if ! eq{}{R_CT_Lc}}
  driver = redirect
  data = R_CT_Lc
  address_data = sender=R_CS_D $address_data
  errors_to = error@services.advancedfiltering.net
  redirect_router = internet_router
  unseen = true
backup_domain_pass_router:
  condition = ${if ! eq{}{R_CT_Lc}}
  driver = redirect
  data = $local_part@$domain
  # remove the first (new) key
  address_data = ${sg{$address_data}{^\\s*\\S+\\s*}{}}
  errors_to = error@services.advancedfiltering.net
  redirect_router = backup_end_router

# * backup_client {continue} -> internet >> backup_end => error
R_LDAP_DN == U_Submission_R_C_LDAP_DN
R_CS_D == ${lookup ldap{LDAP_C/R_LDAP_DN?afUClientTechMailAddress?base}}
# the same for all backup_ routers
R_CT_Lc == ${lookup ldap{LDAP_C/R_LDAP_DN?afUSubmissionBackupMailAddress?base}}
backup_client_router:
  # prevent address_data update
  condition = ${if ! eq{}{R_CT_Lc}}
  driver = redirect
  data = R_CT_Lc
  address_data = sender=R_CS_D $address_data
  errors_to = error@services.advancedfiltering.net
  redirect_router = internet_router
  unseen = true
backup_client_pass_router:
  condition = ${if ! eq{}{R_CT_Lc}}
  driver = redirect
  data = $local_part@$domain
  # remove the first (new) key
  address_data = ${sg{$address_data}{^\\s*\\S+\\s*}{}}
  errors_to = error@services.advancedfiltering.net
  redirect_router = backup_end_router

# * backup_end
backup_end_router:
  driver = redirect
  data = ""

# * spamsender [flag_spamsender] {stop} -> service => error
spamsender_router:
  condition = $acl_m_u_ss_f
  driver = redirect
  data = spamsender@services.advancedfiltering.net
  errors_to = error@services.advancedfiltering.net
  redirect_router = service_router
  headers_remove = X-Envelope-From:X-Envelope-To
  headers_add = X-Envelope-From: $sender_address\nX-Envelope-To: $acl_m_u_recipients
  headers_add = X-AdvancedFiltering-MessageData-Submission: R_MDS_H_D

# * internet {stop} => bounce
internet_router:
  driver = dnslookup
  address_data = $address_data sender=$sender_address
  transport = internet_transport
  errors_to = bounce@services.advancedfiltering.net
  check_srv = smtp
  self = send
  headers_add = X-AdvancedFiltering-MessageData-Submission: R_MDS_H_D

begin transports

service_transport:
  driver = smtp
  # mandatory tls
  hosts_require_tls = *
  # system cert, verify
  tls_certificate = S_H_C_D
  tls_privatekey = S_H_CK_D
  tls_verify_certificates = S_H_CA_D
  tls_crl = S_H_CA_D

internet_transport:
  driver = smtp
  # public cert, no verify
  tls_certificate = S_S_C_D
  tls_privatekey = S_S_CK_D
  tls_verify_certificates = S_S_CA_D
  return_path = ${extract{sender}{$address_data}}
  dkim_domain = ${domain:${address:$bheader_From:}}
  dkim_selector = ${lookup ldap{LDAP_C/U_Submission_R_C_D_LDAP_DN?afUSubmissionDomainDKIMSelector?base}}
  dkim_private_key = /usr/local/advancedfiltering/submission/dkim/$acl_m_u_client.key
  dkim_canon = relaxed
  dkim_strict = true

begin retry

# DEBUG
^\N[^@]+@test\-smtp\.hosts\.advancedfiltering\.net$\N * F,5s,1s
^\N[^@]+@[^@]+\.test\.advancedfiltering\.net$\N * F,5s,1s
^\N[^@]+@w01\.hosts\.advancedfiltering\.net$\N * F,5s,1s
^\N[^@]+@w02\.hosts\.advancedfiltering\.net$\N * F,5s,1s
^\N[^@]+@h01\.hosts\.advancedfiltering\.net$\N * F,5s,1s
^\N[^@]+@h02\.hosts\.advancedfiltering\.net$\N * F,5s,1s

services.advancedfiltering.net * F,15m,1m; H,7d,15m,2
bounce@services.advancedfiltering.net * F,15m,1m; F,1d,15m

* rcpt_4xx F,1m,5s; F,15m,1m; F,1h,15m; F,1d,1h
* * F,15m,1m; F,1h,15m; F,1d,1h

begin authenticators

# Authenticators ...
# A_...

# client Login
A_LOGIN_D = ${if eq{}{$auth1}{$auth2}{$auth1}}
# client Password
A_PASSWORD_D = ${if eq{}{$auth1}{$auth3}{$auth2}}

# MailBox to Client
A_MB2C_D = ${if eq{}{${domain:A_LOGIN_D}}{}{${lookup ldap{LDAP_C/afSSMTPDomainName=${quote_ldap_dn:${domain:A_LOGIN_D}},S_SMTP_LDAP_DN?afSSMTPDomainClientName?base}}}}
# Login to Domain
A_L2D_D = ${if eq{}{${domain:A_LOGIN_D}}{A_LOGIN_D}{${domain:A_LOGIN_D}}}
# Domain to Client
A_D2C_D = ${lookup ldap{LDAP_C/afSSMTPDomainName=${quote_ldap_dn:A_L2D_D},S_SMTP_LDAP_DN?afSSMTPDomainClientName?base}}

# MailBox to Realm
A_MB2R_D = ${if eq{}{A_MB2C_D}{}{${lookup ldap{LDAP_C/afSClientName=${quote_ldap_dn:A_MB2C_D},S_LDAP_DN?afSClientRealm?base}}}}
# Domain to Realm
A_D2R_D = ${if eq{}{A_D2C_D}{}{${lookup ldap{LDAP_C/afSClientName=${quote_ldap_dn:A_D2C_D},S_LDAP_DN?afSClientRealm?base}}}}
# Client to Realm
A_C2R_D = ${lookup ldap{LDAP_C/afSClientName=${quote_ldap_dn:A_LOGIN_D},S_LDAP_DN?afSClientRealm?base}}

# Realm
A_REALM_D = ${if eq{}{A_MB2R_D}{${if eq{}{A_D2R_D}{${if eq{}{A_C2R_D}{}{A_C2R_D}}}{A_D2R_D}}}{A_MB2R_D}}

# Login to Domain Alias
A_L2DA_D = ${if eq{}{A_D2C_D}{}{${lookup ldap{LDAP_C/afUSubmissionDomainName=${quote_ldap_dn:A_L2D_D},afUClientName=${quote_ldap_dn:A_D2C_D},afUServiceRealm=${quote_ldap_dn:A_REALM_D}+U_Submission_LDAP_DN?afUSubmissionDomainAliasName?base}}}}

# Domain
A_DOMAIN_D = ${if eq{}{A_L2DA_D}{A_L2D_D}{A_L2DA_D}}

# MailBox Password
A_MB_P_D = ${if or{{eq{}{${domain:A_LOGIN_D}}}{eq{}{A_D2C_D}}{eq{}{A_REALM_D}}}{}{${lookup ldap{LDAP_C/afUSubmissionDMBLocalPart=${quote_ldap_dn:${local_part:A_LOGIN_D}},afUSubmissionDomainName=${quote_ldap_dn:A_DOMAIN_D},afUClientName=${quote_ldap_dn:A_D2C_D},afUServiceRealm=${quote_ldap_dn:A_REALM_D}+U_Submission_LDAP_DN?afUSubmissionAuthPassword?base}}}}
# Domain Password
A_D_P_D = ${if or{{eq{}{A_D2C_D}}{eq{}{A_REALM_D}}}{}{${lookup ldap{LDAP_C/afUSubmissionDomainName=${quote_ldap_dn:A_DOMAIN_D},afUClientName=${quote_ldap_dn:A_D2C_D},afUServiceRealm=${quote_ldap_dn:A_REALM_D}+U_Submission_LDAP_DN?afUSubmissionAuthPassword?base}}}}
# Client Password
A_C_P_D = ${if eq{}{A_REALM_D}{}{${lookup ldap{LDAP_C/afUClientName=${quote_ldap_dn:A_LOGIN_D},afUServiceRealm=${quote_ldap_dn:A_REALM_D}+U_Submission_LDAP_DN?afUSubmissionAuthPassword?base}}}}

# MailBox Existing
A_MB_E_F = ${if or{{eq{}{${domain:A_LOGIN_D}}}{eq{}{A_D2C_D}}{eq{}{A_REALM_D}}}{}{${lookup ldap{LDAP_C/afUSubmissionDMBLocalPart=${quote_ldap_dn:${local_part:A_LOGIN_D}},afUSubmissionDomainName=${quote_ldap_dn:A_DOMAIN_D},afUClientName=${quote_ldap_dn:A_D2C_D},afUServiceRealm=${quote_ldap_dn:A_REALM_D}+U_Submission_LDAP_DN?objectClass?base}{true}{false}}}}
# Domain Existing
A_D_E_F = ${if or{{eq{}{A_D2C_D}}{eq{}{A_REALM_D}}}{}{${lookup ldap{LDAP_C/afUSubmissionDomainName=${quote_ldap_dn:A_DOMAIN_D},afUClientName=${quote_ldap_dn:A_D2C_D},afUServiceRealm=${quote_ldap_dn:A_REALM_D}+U_Submission_LDAP_DN?objectClass?base}{true}{false}}}}
# Client Existing
A_C_E_F = ${if eq{}{A_REALM_D}{}{${lookup ldap{LDAP_C/afUClientName=${quote_ldap_dn:A_LOGIN_D},afUServiceRealm=${quote_ldap_dn:A_REALM_D}+U_Submission_LDAP_DN?objectClass?base}{true}{false}}}}

# server_advertise_condition
A_SAC_D = ${if ! eq{}{$tls_in_cipher}}
# server_condition Password
A_SC_P_F = ${if or{{crypteq{A_PASSWORD_D}{A_MB_P_D}}{crypteq{A_PASSWORD_D}{A_D_P_D}}{crypteq{A_PASSWORD_D}{A_C_P_D}}}}
# server_condition Existing
A_SC_E_F = ${if or{{bool{A_MB_E_F}}{bool{A_D_E_F}}{bool{A_C_E_F}}}}
# server_condition
A_SC_D = ${if eq{}{A_REALM_D}{Not in service}{${if inlist{A_REALM_D}{<, S_REALM_Lc}{${if bool{A_SC_E_F}{A_SC_P_F}{Replicating, please try again later}}}{Moved, please try another host}}}}

login_authenticator:
  server_advertise_condition = A_SAC_D
  server_condition = A_SC_D
  driver = plaintext
  public_name = LOGIN
  server_prompts = User Name : Password
  server_set_id = A_LOGIN_D

plain_authenticator:
  server_advertise_condition = A_SAC_D
  server_condition = A_SC_D
  driver = plaintext
  public_name = PLAIN
  server_prompts = :
  server_set_id = A_LOGIN_D
